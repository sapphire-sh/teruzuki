using System;using System.Collections;using System.Collections.Generic;using System.Linq;using UnityEngine;using teruzuki.Twitter;namespace teruzuki.Twitter{	public class Client	{		private OAuth oauth;		public Token Token
		{
			get; private set;
		}		public Client () : this (new Token())		{		}		public Client (Token token)		{			oauth = new OAuth (token);		}		public IEnumerator AcquireRequestToken (Action<string> callback)		{			Dictionary<string, string> headers = new Dictionary<string, string> ();			headers.Add ("Authorization", oauth.GetAuthorizationHeader (Constants.URL.REQUEST_TOKEN, "POST", null));			WWWForm wwwForm = new WWWForm ();			wwwForm.AddField ("", "");			WWW www = new WWW (Constants.URL.REQUEST_TOKEN, wwwForm.data, headers);			yield return www;			var query = Helper.ParseQueryString (www.text);			oauth.OAuthToken = query ["oauth_token"];			callback (string.Format ("https://api.twitter.com/oauth/authenticate?oauth_token={0}", query ["oauth_token"]));		}		public IEnumerator AcquireAccessToken (string pin, Action callback)		{			oauth.OAuthVerifier = pin;			Dictionary<string, string> headers = new Dictionary<string, string> ();			headers.Add ("Authorization", oauth.GetAuthorizationHeader (Constants.URL.ACCESS_TOKEN, "POST", null));			WWWForm wwwForm = new WWWForm ();			wwwForm.AddField ("", "");			WWW www = new WWW (Constants.URL.ACCESS_TOKEN, wwwForm.data, headers);			yield return www;			var query = Helper.ParseQueryString (www.text);			oauth.OAuthToken = Token.AccessToken = query ["oauth_token"];			oauth.OAuthTokenSecret = Token.AccessTokenSecret = query ["oauth_token_secret"];			callback ();		}		public IEnumerator GET<T> (string url, Parameters.ITwitterParameters parameters, Action<T> callback)		{			url += parameters.ComposeQueryString ();			Dictionary<string, string> headers = new Dictionary<string, string> ();			headers.Add ("Authorization", oauth.GetAuthorizationHeader (url, "GET", parameters));			WWW www = new WWW (url, null, headers);			yield return www;			Debug.Log(www.text);			callback (JsonUtility.FromJson<T> (www.text));		}		public IEnumerator POST<T> (string url, Parameters.ITwitterParameters parameters, Action<T> callback)		{			WWWForm wwwForm = new WWWForm ();			parameters.Queries.ToList ().ForEach (x => {				wwwForm.AddField (x.Key, x.Value);			});			Dictionary<string, string> headers = new Dictionary<string, string> ();			headers.Add ("Authorization", oauth.GetAuthorizationHeader (url, "POST", parameters));			WWW www = new WWW (url, wwwForm.data, headers);			yield return www;			callback (JsonUtility.FromJson<T> (www.text));		}	}}